{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to FIRST Illinois Robotics Website Docs This documentation is split up into two main sections: User documentation, focused on those who will be editing and managing the contents of the site day to day. You can find this here or by clicking the User tab at the top of the screen. Develper documentation, focused on the interals of the site, how it works, and how to maintain it in the future. You can find this here or by clicking the Developer tab at the top of the screen.","title":"Welcome"},{"location":"#welcome-to-first-illinois-robotics-website-docs","text":"This documentation is split up into two main sections: User documentation, focused on those who will be editing and managing the contents of the site day to day. You can find this here or by clicking the User tab at the top of the screen. Develper documentation, focused on the interals of the site, how it works, and how to maintain it in the future. You can find this here or by clicking the Developer tab at the top of the screen.","title":"Welcome to FIRST Illinois Robotics Website Docs"},{"location":"developer/","text":"To start with local development, you should start by creating a local development environment using the instructions found in Development Environment .","title":"Getting Started"},{"location":"developer/env/","text":"For an ideal development environment, the entire project is set up for automatic reloading of all assets in development. Install This project uses the Poetry project management tools. This is essentially a combined version of Pip and venv tools. To install the dependencies in the project and also create a virtual environment for the project to use, execute the following command: poetry install Starting/building the Frontend Server There are two options for how to run the frontend system using development. If you are changing anything in the frontend/ directory with your work, you should run webpack/yarn in watch mode, with the following commands: cd frontend/ yarn run watch This spawns a separate server on port 9000 to serve the front end materials. If you kill the yarn run watch command, this server will die and your assets (JS, CSS, etc) will stop being available, rendering the site... very hard to use. If you are not modifying the frontend/ directory at all, and only modifying or testing the python side of the project, you can simply build a developer version to be served locally: cd frontend/ yarn run build_dev Starting the Django Livereload Server This isn't necessary, but if you're modifying templates or views and want to see your results reflected immediately on file save without having to reload your browser, this can make your life much easier. If not, you can just ignore this command entirely. You'll notice an error in the browser console, but this can be safely ignored. poetry run python manage.py livereload --ignore-static-dirs Starting the Django Dev Server poetry run python manage.py runserver Getting initial data By default, the website will not load since there is no data for the required pages (program main pages, home page, etc). This can be fixed by loading the provided default fixture after apply database migrations: poetry run python manage.py migrate poetry run python manage.py loaddata initial_data If the initial data is our of date, a new fixture can be overwritten using this command from the home directory of the repository: poetry run python manage.py dumpdata -o firweb/fixtures/initial_data.json --exclude contenttypes --exclude admin.logentry --exclude sessions --exclude auth.permission Keep in mind that this command will store all current data, including a default user and their (hashed) password. There should be a super user in this data with the username \"admin\" and the password \"first-robotics\" for testing.","title":"Env"},{"location":"developer/env/#install","text":"This project uses the Poetry project management tools. This is essentially a combined version of Pip and venv tools. To install the dependencies in the project and also create a virtual environment for the project to use, execute the following command: poetry install","title":"Install"},{"location":"developer/env/#startingbuilding-the-frontend-server","text":"There are two options for how to run the frontend system using development. If you are changing anything in the frontend/ directory with your work, you should run webpack/yarn in watch mode, with the following commands: cd frontend/ yarn run watch This spawns a separate server on port 9000 to serve the front end materials. If you kill the yarn run watch command, this server will die and your assets (JS, CSS, etc) will stop being available, rendering the site... very hard to use. If you are not modifying the frontend/ directory at all, and only modifying or testing the python side of the project, you can simply build a developer version to be served locally: cd frontend/ yarn run build_dev","title":"Starting/building the Frontend Server"},{"location":"developer/env/#starting-the-django-livereload-server","text":"This isn't necessary, but if you're modifying templates or views and want to see your results reflected immediately on file save without having to reload your browser, this can make your life much easier. If not, you can just ignore this command entirely. You'll notice an error in the browser console, but this can be safely ignored. poetry run python manage.py livereload --ignore-static-dirs","title":"Starting the Django Livereload Server"},{"location":"developer/env/#starting-the-django-dev-server","text":"poetry run python manage.py runserver","title":"Starting the Django Dev Server"},{"location":"developer/env/#getting-initial-data","text":"By default, the website will not load since there is no data for the required pages (program main pages, home page, etc). This can be fixed by loading the provided default fixture after apply database migrations: poetry run python manage.py migrate poetry run python manage.py loaddata initial_data If the initial data is our of date, a new fixture can be overwritten using this command from the home directory of the repository: poetry run python manage.py dumpdata -o firweb/fixtures/initial_data.json --exclude contenttypes --exclude admin.logentry --exclude sessions --exclude auth.permission Keep in mind that this command will store all current data, including a default user and their (hashed) password. There should be a super user in this data with the username \"admin\" and the password \"first-robotics\" for testing.","title":"Getting initial data"},{"location":"user/","text":"","title":"Index"},{"location":"user/logging_in/","text":"To log in to the website, you can navigate to https://staging.firstillinoisrobotics.org/manager","title":"Logging in"}]}