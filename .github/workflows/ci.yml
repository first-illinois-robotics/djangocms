name: CI

on:
  [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - uses: Gr1N/setup-poetry@v7

      - name: Restore Python/Poetry Cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Restore Yarn Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Python Dependencies
        run: poetry install

      - name: Install Node Dependencies
        run: |
          cd ./frontend
          yarn install

      - name: Run linters
        uses: wearerequired/lint-action@v1
        with:
          black: true
          black_command_prefix: poetry run
          mypy: true
          mypy_command_prefix: poetry run
          eslint: true
          eslint_dir: ./frontend/ts/
          eslint_extensions: js,ts
          stylelint: true
          stylelint_dir: ./frontend/sass/
          auto_fix: false

  deploy:
    runs-on: ubuntu-20.04
    needs: lint
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - uses: Gr1N/setup-poetry@v7

      - uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Restore Yarn Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Python Dependencies
        run: poetry install

      - name: Export Python Dependencies
        run: poetry export -o requirements.txt --without-hashes

      - name: Install Node Dependencies
        run: |
          cd ./frontend
          yarn install

      - name: Build Frontend
        run: |
          cd ./frontend
          yarn run build

      - name: Collect Static
        run: poetry run python manage.py collectstatic

      - name: Set up Cloud SDK (Staging)
        uses: google-github-actions/setup-gcloud@v0
        if: ${{ github.ref == 'refs/heads/develop' }}
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
          install_components: 'beta'

      - name: Connect to Cloud SQL Proxy
        uses: mattes/gce-cloudsql-proxy-action@v1
        with:
          creds: ${{ secrets.GCP_SA_KEY }}
          instance: ${{ secrets.GCP_DB_NAME }}

      - name: Apply Database Migrations to DB
        env:
          GOOGLE_CLOUD_PROJECT: ${{ secrets.GCP_PROJECT_ID }}
          USE_CLOUD_SQL_AUTH_PROXY: true
        run: LD_PRELOAD=/lib/x86_64-linux-gnu/libstdc++.so.6 poetry run python manage.py migrate

      - name: Deploy to Google App Engine
        run: gcloud beta app deploy --quiet app.yaml --promote

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - run: pip install mkdocs-material
      - run: mkdocs gh-deploy --force

